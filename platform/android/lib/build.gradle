apply plugin: 'com.android.library'

repositories {
    google()
    maven {
        url "https://maven.google.com"
    }
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'com.android.support:support-v4:25.+'
    compile 'commons-io:commons-io:2.4'
    compile 'com.koushikdutta.ion:ion:2.+'
}

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)
def ndk_clang = (rootProject.hasProperty("readium_ndk_clang") && rootProject.readium_ndk_clang)
def readiumSdkLibDir = null
def readiumSdkIncludeDir = null
def lcpBuildContentFilter = false
def extraCmake = null

if (rootProject.hasProperty("readium_extra_cmake")) {
    extraCmake = rootProject.readium_extra_cmake
}

if (rootProject.hasProperty("readium_sdk_lib_dir")) {
    readiumSdkLibDir = rootProject.readium_sdk_lib_dir
}

if (rootProject.hasProperty("readium_sdk_include_dir")) {
    readiumSdkIncludeDir = rootProject.readium_sdk_include_dir
}

if (rootProject.hasProperty("readium_lcp_build_content_filter")) {
    lcpBuildContentFilter = rootProject.readium_lcp_build_content_filter
}
println("extraCmake ${extraCmake}")
def toolchain = ndk_clang ? "clang" : "gcc"
def stl = ndk_clang ? "c++_shared" : "gnustl_shared"

if (!lcpBuildContentFilter) {
    try {
        def epub3Dir = project(':epub3').projectDir
        readiumSdkLibDir = "${epub3Dir}/libs"
        readiumSdkIncludeDir = "${epub3Dir}/include"
        lcpBuildContentFilter = true
        println("Build with rsdk *")
    } catch (UnknownProjectException e) {
        // No epub3 project is defined
        println("Build without rsdk")
    }
} else {
    println("Build with rsdk")
}
println "${lcpBuildContentFilter}"
println "${readiumSdkLibDir}"
println "${readiumSdkIncludeDir}"
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                if (lcpBuildContentFilter) {
                    targets "clientlib", "contentfilter", "lcp"

                    arguments "-DCMAKE_JOB_POOLS:STRING=compile=6;link=6",
                        "-DFEATURES_READIUM=1",
                        "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_TOOLCHAIN=${toolchain}",
                        "-DANDROID_STL=${stl}",
                        "-DRSDK_INCLUDE_DIR=${readiumSdkIncludeDir}",
                        "-DRSDK_LIB_DIR=${readiumSdkLibDir}",
                        "-DEXTRA_CMAKE=${extraCmake}"
                } else {
                    targets "clientlib", "lcp-min"

                    arguments "-DCMAKE_JOB_POOLS:STRING=compile=6;link=6",
                        "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_TOOLCHAIN=${toolchain}",
                        "-DANDROID_STL=${stl}",
                        "-DRSDK_INCLUDE_DIR=${readiumSdkIncludeDir}",
                        "-DRSDK_LIB_DIR=${readiumSdkLibDir}",
                        "-DEXTRA_CMAKE=${extraCmake}"
                }

                if (!ndk_skipARM && !ndk_skipX86) {
                    abiFilters = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']
                } else {
                    if (!ndk_skipARM) {
                        abiFilters = ['armeabi-v7a', 'arm64-v8a']
                    }
                    if (!ndk_skipX86) {
                        abiFilters = ['x86', 'x86_64']
                    }
                }
            }
        }
    }

    sourceSets {
        if (lcpBuildContentFilter) {
            main {
                java {
                    srcDirs = [
                        './src/clientlib/java',
                        './src/contentfilter/java'
                    ]
                }
            }
        } else {
            main {
                java {
                    srcDirs = [
                            './src/clientlib/java'
                    ]
                }
            }
        }
    }

    buildTypes {
        release {
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=RELEASE'
                }
            }
        }

        debug {
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=DEBUG'
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    flavorDimensions "version"
    productFlavors {
        if (!ndk_skipARM && !ndk_skipX86) {
            'armeabi-v7a--arm64-v8a--x86--x86_64' {
                dimension "version"
                ndk {
                    abiFilters = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']
                }
            }
        } else {
            if (!ndk_skipARM) {
                'armeabi-v7a--arm64-v8a' {
                    dimension "version"
                    ndk {
                        abiFilters = ['armeabi-v7a', 'arm64-v8a']
                    }
                }
            }
            if (!ndk_skipX86) {
                'x86--x86_64' {
                    dimension "version"
                    ndk {
                        abiFilters = ['x86', 'x86_64']
                    }
                }
            }
        }
    }
}

clean.doFirst {
    println("Clean dist and libs directory")

    def dstDirPath = "${project.projectDir}/../dist/"
    delete dstDirPath

    dstDirPath = "${project.projectDir}/libs/"
    delete dstDirPath
}

task copyLibs {
    doLast {
        println ("Copy libs ...")
        android.productFlavors.all { flavor ->
            android.buildTypes.all { buildType ->

                def srcDirPath_AAR = "${project.projectDir}/build/outputs/aar"
                def dstDirPath_AAR = "${project.projectDir}/../dist/${buildType.name.toUpperCase()}"
                copy {
                    from("${srcDirPath_AAR}") {
                        include("lib-${flavor.name}-${buildType.name}.aar")
                    }
                    into("${dstDirPath_AAR}")
                }

                // def srcFilename = "lib-${flavor.name}-${buildType.name}.aar"
                // copy {
                //     from("${srcDirPath_AAR}") {
                //         include(srcFilename)
                //     }
                //     into("${dstDirPath_AAR}")
                //     rename(srcFilename, "liblcp.aar")
                // }

                flavor.ndk.abiFilters.each { abiFilter ->

                    def srcDirPath_LIBS = "${project.projectDir}/build/intermediates/cmake/${flavor.name}/${buildType.name}/obj/${abiFilter}"
                    def dstDirPath_LIBS = "${project.projectDir}/libs/${buildType.name.toUpperCase()}/${abiFilter}"

                    copy {
                        from("${srcDirPath_LIBS}") {
                            include("*.so", "*.a")
                        }
                        into("${dstDirPath_LIBS}")
                    }

                    if (lcpBuildContentFilter) {
                        srcDirPath_LIBS = "${readiumSdkLibDir}/${buildType.name.toUpperCase()}/${abiFilter}"

                        copy {
                            from("${srcDirPath_LIBS}") {
                                include("*.so")
                            }
                            into("${dstDirPath_LIBS}")
                        }
                    }
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('assemble')) {
        task.dependsOn copyLibs
    }
}
